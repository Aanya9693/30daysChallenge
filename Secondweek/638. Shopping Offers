class Solution {
public:
    map<vector<int>, int> memo;

    int shoppingOffers(vector<int> &price, vector<vector<int>> &special, vector<int> &needs) {
        int n = price.size();
        vector<vector<int>> specials;

        for (int i = 0; i < special.size(); i++) {
            int sum = 0;
            for (int j = 0; j < n; j++) sum += special[i][j] * price[j];

            if (sum > special[i].back()) specials.push_back(special[i]);
        }
        return dfs(price, specials, needs);
    }

    int dfs(vector<int> &price, vector<vector<int>> &specials, vector<int> &needs) {
        int n = price.size();

        if (memo[needs]) return memo[needs];

        int &x = memo[needs];
        int res = 0;

        for (int z = 0; z < n; z++) res += price[z] * needs[z];

        for (const auto combo: specials) {
            int choose = 1;
            for (int k = 0; k < n; k++) {
                if (combo[k] > needs[k]) {
                    choose = 0;
                    break;
                }
            }

            if (choose) {
                for (int p = 0; p < n; p++) {
                    needs[p] -= combo[p];
                }

                res = min(res, dfs(price, specials, needs) + combo.back());
                for (int q = 0; q < n; q++) {
                    needs[q] += combo[q];
                }
            }
        }

        return x = res;
    }
};
