/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //adjecency list
    unordered_map<int, vector<int>>adj;

    int amountOfTime(TreeNode* root, int start) {
        //as root start can be anywhere we first need to construct a graph 
        //out of this tree
        constructGraph(root);

        //-----bfs
        queue<int>q;
        q.push(start);
        //we can use set because it was mentioned the values are unique
        unordered_set<int>visited;

        int minutesPassed=-1;

        while(!q.empty()){
            int levelSize=q.size();
            //inorder to increase the minutesPassed all vertices at one 
            //level should be visited that's we are taking a levelSize 
            //which is equal to q.size--> curr vertices at one level
            while(levelSize>0){
                int currNode=q.front();
                q.pop();
                visited.insert(currNode);
                for(auto e : adj[currNode]){
                    if(!visited.count(e)){
                        q.push(e);
                    }
                }
                levelSize--;
            }
            minutesPassed++;
        }

        return minutesPassed++;
    }

    void constructGraph(TreeNode* root){
        if(root == nullptr) return;
        
        if(root->left){
            adj[root->val].push_back(root->left->val);
            adj[root->left->val].push_back(root->val);
        }
        if(root->right){
            adj[root->val].push_back(root->right->val);
            adj[root->right->val].push_back(root->val);
        }

        constructGraph(root->left);
        constructGraph(root->right);
    }
};