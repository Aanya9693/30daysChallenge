class Solution {
public:
    int equalSubstring(string s, string t, int maxCost) {
        int maxLen = 0;
        int cost = 0;
        int left = 0, right = 0;
        int n = s.size();

        while (right < n) {
            int diff = abs(s[right] - t[right]);

            // Check if the current substring is within the cost limit
            if (cost + diff <= maxCost) {
                cost += diff;
                maxLen = max(maxLen, right - left + 1);
                right++;
            } else {
                // Adjust the substring by moving the left pointer
                cost -= abs(s[left] - t[left]);
                left++;
            }
        }

        return maxLen;
    }
};
